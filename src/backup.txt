#define BLYNK_TEMPLATE_ID "TMPL6k8skf8vt"
#define BLYNK_TEMPLATE_NAME "Clock with Temp and Humidity"
#define BLYNK_AUTH_TOKEN "qUNfMaqJMIjAw_tzUFLDnG_x6SaEP9EB"

#include "RTClib.h"
#include <Adafruit_AHTX0.h>
#include <TFT_eSPI.h>
#include <SPI.h>
#include <BlynkSimpleEsp32.h>
#include <WiFi.h>
#include <WiFiClient.h>

RTC_DS3231 rtc;
Adafruit_AHTX0 aht;
TFT_eSPI tft = TFT_eSPI();

// Colors
#define BACKGROUND_COLOR TFT_BLACK
#define DATE_COLOR TFT_WHITE
#define TEMP_COLOR TFT_ORANGE
#define HUM_COLOR TFT_GREEN

//Blynk
char ssid[] = "Xuan Hoang-2.4G";
char pass[] = "#dir7\%9cs(_%";
char auth[] = "qUNfMaqJMIjAw_tzUFLDnG_x6SaEP9EB";
SimpleTimer timer;

sensors_event_t humidity, temp;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String yearStr, monthStr, dayStr, hourStr, minuteStr, dayOfWeek, dateStr, timeStr, ahtTempStr, humidityStr;

//Optimization
#define TIME_TO_SLEEP 60 //In seconds
#define TIME_TO_STAY_AWAKE 5 //In seconds

void sendToBlynk() {
    Blynk.virtualWrite(V0, temp.temperature);
    Blynk.virtualWrite(V1, humidity.relative_humidity);

    // Print to serial for debugging
    Serial.println(dayOfWeek + ", " + dateStr + " " + timeStr);
    Serial.print("Temperature: ");
    Serial.print(temp.temperature);
    Serial.println("Â°C");
    Serial.print("Humidity: ");
    Serial.print(humidity.relative_humidity);
    Serial.println("% RH");
    Serial.println();
}

void setup() {
    Serial.begin(115200);

    // Connect to Wi-Fi
    Serial.print("Connecting to Wi-Fi...");
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWi-Fi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    // Initialize Blynk
    Blynk.begin(auth, ssid, pass);

    // Set up a timer to send data to Blynk every second
    timer.setInterval(1000L, sendToBlynk);

    // Initialize TFT
    tft.init();
    tft.setRotation(1); // Landscape mode
    tft.fillScreen(BACKGROUND_COLOR);
    
    // Initialize RTC
    if (!rtc.begin()) {
        Serial.println("Couldn't find RTC");
        tft.setTextSize(2);
        tft.drawString("RTC Error!", 10, 10);
        Serial.flush();
        while (1) delay(10);
    }

    // Set current time
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

    // Initialize temperature/humidity sensor
    if (!aht.begin()) {
        Serial.println("Could not find AHT sensor!");
        tft.setTextSize(2);
        tft.drawString("AHT Sensor Error!", 10, 40);
        while (1) delay(10);
    }
}

void loop() {
    unsigned long start = millis();
    while (millis() - start < TIME_TO_STAY_AWAKE * 1000) { // Stay awake for some seconds to allow the code to run before sleeping again
        // Get current time from RTC
        DateTime now = rtc.now();
        // Get temperature and humidity
        aht.getEvent(&humidity, &temp);

        // Format date and time strings
        yearStr = String(now.year(), DEC);
        monthStr = (now.month() < 10 ? "0" : "") + String(now.month(), DEC);
        dayStr = (now.day() < 10 ? "0" : "") + String(now.day(), DEC);
        hourStr = (now.hour() < 10 ? "0" : "") + String(now.hour(), DEC);
        minuteStr = (now.minute() < 10 ? "0" : "") + String(now.minute(), DEC);
        dayOfWeek = daysOfTheWeek[now.dayOfTheWeek()];

        // Date & Time display
        tft.setTextColor(DATE_COLOR, BACKGROUND_COLOR);
        tft.drawString(dayOfWeek, 10, 10, 4);

        dateStr = dayStr + "-" + monthStr + "-" + yearStr;
        tft.drawString(dateStr, 180, 10, 4);

        timeStr = hourStr + ":" + minuteStr;
        tft.drawString(timeStr, 30, 50, 8);

        // Display AHT temperature and humidity
        tft.setTextColor(TEMP_COLOR, BACKGROUND_COLOR);
        tft.drawString("Temperature", 10, 140, 4);
        ahtTempStr = String(temp.temperature, 1);
        tft.drawString(ahtTempStr, 20, 180, 6);

        tft.setTextColor(HUM_COLOR, BACKGROUND_COLOR);
        tft.drawString("Humidity", 190, 140, 4);
        humidityStr = String(humidity.relative_humidity, 1);
        tft.drawString(humidityStr, 190, 180, 6);

        // Blynk
        Blynk.run();
        timer.run();
        delay(500); // Small delay to avoid flooding
    }

    // Enter light sleep
    Serial.println("Going to light sleep...");
    delay(100);
    esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * 1000000ULL); // 60 seconds in microseconds
    esp_light_sleep_start();
}